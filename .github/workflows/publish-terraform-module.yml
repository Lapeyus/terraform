name: Publish Terraform Module

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  detect_and_publish:
    name: Detect Changes and Publish Module
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # Fetching the full history

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install jq
        run: sudo apt-get install jq

      - name: Detect Changed Modules
        id: changes
        run: |
          CHANGED_MODULES=$(git diff --name-only HEAD~1 HEAD | grep '^modules/' | cut -d'/' -f2 | sort -u)
          echo "Changed modules: $CHANGED_MODULES"
          echo "changed_modules=$CHANGED_MODULES" >> $GITHUB_ENV

      - name: Fail if no changes detected
        if: env.changed_modules == ''
        run: |
          echo "No changes detected in the modules folder. Exiting."
          exit 1

      - name: Compress Changed Modules
        if: env.changed_modules != ''
        run: |
          for module in ${{ env.changed_modules }}; do
            cd modules/$module
            tar -czvf ../../${module}.tar.gz *
            cd ../..
          done

      - name: Get Semver from Commit or PR Comments
        id: get_semver
        run: |
          for module in ${{ env.changed_modules }}; do
            PR_URL=$(jq -r '.pull_requests[0].url' < "$GITHUB_EVENT_PATH")
            SEMVER=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" $PR_URL/comments | jq -r '.[] | select(.body | test("[0-9]+\\.[0-9]+\\.[0-9]+")).body' | grep -o -E '[0-9]+\\.[0-9]+\\.[0-9]+' | head -n 1)
            if [ -z "$SEMVER" ]; then
              echo "No semver found in PR comments. Using latest tag logic."
              LATEST_TAG=$(git tag -l "$module-v*" | sort -V | tail -n 1)
              if [ -z "$LATEST_TAG" ]; then
                SEMVER="v1.0.0"
              else
                VERSION=$(echo $LATEST_TAG | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+')
                SEMVER="v$(echo $VERSION | awk -F. '{print $1"."$2"."$3+1}')"
              fi
            fi
            NEW_TAG="$module-$SEMVER"
            echo "New tag for $module is $NEW_TAG"
            echo "new_tag_$module=$NEW_TAG" >> $GITHUB_ENV
          done
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Create GitHub Release
        if: env.changed_modules != ''
        run: |
          for module in ${{ env.changed_modules }}; do
            NEW_TAG=$(printenv new_tag_$module)
            gh release create "$NEW_TAG" "${module}.tar.gz" -t "Module $module Release" -n "Release for module $module"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
