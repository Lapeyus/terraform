name: Publish Terraform Module

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  detect_and_publish:
    name: Detect Changes and Publish Module
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Detect Changed Modules
        id: changes
        run: |
          CHANGED_MODULES=$(git diff --name-only HEAD~1 HEAD | grep '^modules/' | cut -d'/' -f2 | sort -u)
          echo "Changed modules: $CHANGED_MODULES"
          echo "$CHANGED_MODULES" > changed_modules.txt

      - name: Exit if no changes detected
        run: |
          if [ ! -s changed_modules.txt ]; then
            echo "No changes detected in the modules folder. Exiting."
            exit 0
          fi

      - name: Compress Changed Modules
        run: |
          for module in $(cat changed_modules.txt); do
            cd modules/$module
            tar -czvf ../../${module}.tar.gz *
            cd ../..
          done

      - name: Get Semver from Commit Messages or Increment Version
        id: get_semver
        run: |
          for module in $(cat changed_modules.txt); do
            echo "Processing module: $module"
            SEMVER=$(git log -1 --pretty=%B | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
            echo "Found SEMVER in commit message: $SEMVER"
            if [ -z "$SEMVER" ]; then
              echo "No semver found in commit messages. Using latest tag logic."
              LATEST_TAG=$(git tag -l "$module-v*" | sort -V | tail -n 1)
              echo "Latest tag for $module: $LATEST_TAG"
              if [ -z "$LATEST_TAG" ]; then
                SEMVER="1.0.0"
              else
                VERSION=$(echo $LATEST_TAG | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+')
                echo "Parsed version: $VERSION"
                MAJOR=$(echo $VERSION | cut -d. -f1)
                MINOR=$(echo $VERSION | cut -d. -f2)
                PATCH=$(echo $VERSION | cut -d. -f3)
                PATCH=$((PATCH + 1))
                SEMVER="$MAJOR.$MINOR.$PATCH"
                echo "Incremented version: $SEMVER"
              fi
            fi
            NEW_TAG="$module-v$SEMVER"
            echo "New tag for $module is $NEW_TAG"
            echo "$module=$NEW_TAG" >> new_tags.txt
          done

      - name: Set New Tags Environment Variable
        run: |
          while read line; do
            echo "$line" >> $GITHUB_ENV
          done < new_tags.txt

      - name: Create GitHub Release
        run: |
          for module in $(cat changed_modules.txt); do
            NEW_TAG=$(printenv $module)
            echo "Creating release for $module with tag $NEW_TAG"
            gh release create "$NEW_TAG" "${module}.tar.gz" -t "Module $module Release $NEW_TAG" -n "Release for module $module"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
